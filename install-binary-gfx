#!/bin/sh
# Author: Andreas Weber <andreas@it-weber.com>
# Date: 16.12.2006
# Purpose: Script to install binary nvidia/ati drivers for sidux
#
# Changes:
# 	16.12.2006 Initial Version by Andreas Weber 0.1 alpha
#	01.01.2007 Update diabled.
#	01.01.2007 nvidia-legacy driver added
#	01.01.2007 fix for config.h removed. Not needed anymore.
#	08.01.2007 apt-get update added to make sure we can install the required sources
#	21.01.2007 m-a update added
#	22.01.2007 nvidia-glx and nvidia-common added as m-a isn't installing that Packages automatically 
#	24.01.2007 nvidia-xconfig added to change the xorg automatically
#

error() 
{
	# This Funktion is printing out all Error Messages. 
	# This can also be used as the Referenz for the Exit Codes.
	ERR_C=$1
	case $ERR_C in
		254) ERR_D="No NVIDIA/ATI Card found !";;
		253) ERR_D="Kernel Headers not installed !";;
		252) ERR_D="m-a prepare failed !";;
		251) ERR_D="failed to install linux-headers !";;
		250) ERR_D="Build failed (check $LOG) !";;
		249) ERR_D="Wrong argument. Valid modules are nvidia or fglrx. !";;
		248) ERR_D="Package cannot be installed.";;
		246) ERR_D="Database Script not found.";;
		245) ERR_D="apt-get update failed.";;
		244) ERR_D="m-a update failed.";;
		243) ERR_D="nvidia-glx install failed.";;
		242) ERR_D="nvidia-kernel-common install failed.";;
		241) ERR_D="nvidia-xconfig install failed.";;
		*) ERR_D="Unexpected Error !";;
	esac
	echo "${RED}! ERROR: ($ERR_C) $ERR_D${NORMAL}"
	if [ ! -z $LOG ]; then # If we get an error before Log is created we just give it out to stdout.
		echo "$DATE ERROR: ($ERR_C) $ERR_D" >> $LOG
	fi
	echo ""
	# If we are in verbose Mode print out the Log File.
	[ $VERBOSE = 1 ] && cat $LOG
	exit $ERR_C

}

create_log() 
{
	# This Funktion is creating a new Logfile. It will overwrite previous Versions.
	LOG="/var/log/sidux-$KMOD-installer.log"
	# Delete old Logfile if exist.
	rm -f $LOG 2&> /dev/null
	# Create the new File and write basic Information.
	touch $LOG
	echo "Script started: $DATE" >> $LOG
	echo "Detected Card: $KMOD" >> $LOG
	echo "Installed Kernel: $KERNEL" >> $LOG
	echo "Arch: $ARCH" >> $LOG
	echo "" >> $LOG
}

prep() 
{
	# This Funktion will call m-a prepare and make sure the Kernel
	# Headers and other required Packages are  installed.
	# Write Log entry
	echo "$DATE Prepare Process started." >> $LOG
	# Test if we are running a SLH Kernel. That is important because the Kernel isn't 
	# Part of any Apt Repository. We have to have manually Funktion here to install 
	# the Headers.
	if [ $SLH_KERNEL = "TRUE" ]; then
		# If Headers are already installed we are fine to run m-a prepare
		if [ -d /usr/src/linux-headers-$KERNEL ]; then
			echo "* ${BLUE}Kernel Headers found.${NORMAL}"
			echo "* ${BLUE}Running module-assistant prepare.${NORMAL}"
			m-a update 1>> $LOG 2>> $LOG || error 244
			DEBIAN_FRONTEND="noninteractive" \
			DEBIAN_PRIORITY="critical" \
			DEBCONF_NOWARNINGS="yes" \
			m-a prepare $KMOD 1>> $LOG 2>> $LOG  || error 252
		else
			# If Headers are not installed we stop with the error Message
			# 253. User must install the Headers manually. There is a plan
			# to have this Script installing the Headers manually by using
			# slh-source.sh. Comming soon.
			error 253
		fi
	else
		# If we don't have a SLH Kernel we are checking if Headers are already
		# installed. If not the Script will try to install it. If we can't install 
		# the Headers by using apt (maybe a Users Kernel) we will exit the Script 
		# with Error Code 252
		if [ -d /usr/src/linux-headers-$KERNEL ]; then
			DEBIAN_FRONTEND="noninteractive" \
			DEBIAN_PRIORITY="critical" \
			DEBCONF_NOWARNINGS="yes" \
			apt-get -y install linux-headers-$KERNEL 1>> $LOG 2>> $LOG || error 252
		fi
		# We check here again if Headers are there. Just in case apt is reporting
		# exit code 0 but something is still wrong.
		[ -d /usr/src/linux-headers-$KERNEL ] || error 253
		# Running m-a prepare
		m-a update 1>> $LOG 2>> $LOG || error 244
		DEBIAN_FRONTEND="noninteractive" \
		DEBIAN_PRIORITY="critical" \
		DEBCONF_NOWARNINGS="yes" \
		m-a prepare $KMOD 1>> $LOG 2>> $LOG || error 252
	fi
}

build() {
	# We will create the Package now by using m-a. If the build fails we get the 
	# Exitcode 250. 
	echo "* ${BLUE}Building ${MAGENTA}$KMOD ${BLUE}Module.${NORMAL}"
	if [ "$KMOD" = "nvidia-kernel-legacy" ]; then
		ln -s /usr/src/linux/include/linux/autoconf.h /usr/src/linux/include/linux/config.h 1>> $LOG 2>> $LOG
	fi
	
	if [ "$BUILDONLY" = "FALSE" ]; then
		if [ "$KMOD" = "nvidia-kernel-legacy" ]; then
			# The legacy Driver needs a hack on the Source / Headers
			ln -s /usr/src/linux/include/linux/autoconf.h /usr/src/linux/include/linux/config.h 1>> $LOG 2>> $LOG
			# We have to make sure nvidia-kernel-common is installed
			DEBIAN_FRONTEND="noninteractive" \
			DEBIAN_PRIORITY="critical" \
			DEBCONF_NOWARNINGS="yes" \
			apt-get -fy install nvidia-kernel-common 1>> $LOG 2>> $LOG || error 242
		fi
		if [ "$KMOD" = "nvidia" ]; then
			# We have to make sure nvidia-kernel-common is installed
			DDEBIAN_FRONTEND="noninteractive" \
			DEBIAN_PRIORITY="critical" \
			DEBCONF_NOWARNINGS="yes" \
			apt-get -fy install nvidia-kernel-common 1>> $LOG 2>> $LOG || error 242
		fi
	fi
	
	echo "* ${BLUE}Cleaning up old deb's.${NORMAL}"
	# We are cleaning /usr/src from old nvidia debs. Otherwise the ls command for $DEB will create a List
	rm -f /usr/src/$KMOD*$KERNEL*.deb 1>> $LOG 2>> $LOG
	# Building the Module
	DEBIAN_FRONTEND="noninteractive" \
	DEBIAN_PRIORITY="critical" \
	DEBCONF_NOWARNINGS="yes" \
	m-a a-b -i $KMOD 1>> $LOG 2>> $LOG || error 250
	echo "* ${MAGENTA}$KMOD ${GREEN}build successfull.${NORMAL}"
}

install_deb() 
{
	# The build should be fine and we are installing the created deb right now.
	# First we have to get the Name of the File.
	cd /usr/src
	if [ "$KMOD" = "nvidia-kernel-legacy" ]; then
		DEB=$(ls $KMOD-$KERNEL*.deb)
	else
		DEB=$(ls $KMOD-kernel-$KERNEL*.deb)
	fi
	# Go back to the Path we were comming.
	cd $OLDPATH
	echo "* ${BLUE}Installing $DEB${NORMAL}"
	# Install the deb.
	dpkg -i /usr/src/$DEB 1>> $LOG 2>> $LOG
	if [ ! "$?" = "0" ]; then
		# If exitcode from dpkg is not 0 maybe we have to install dependencies.
		# We try an apt-get -f install.
		DEBIAN_FRONTEND="noninteractive" \
		DEBIAN_PRIORITY="critical" \
		DEBCONF_NOWARNINGS="yes" \
		apt-get -fy install 1>> $LOG 2>> $LOG || error 248
	fi	
	if [ "$KMOD" = "nvidia-kernel-legacy" ]; then
		# We have to install nvidia-glx to get the Driver working
		DEBIAN_FRONTEND="noninteractive" \
		DEBIAN_PRIORITY="critical" \
		DEBCONF_NOWARNINGS="yes" \
		apt-get -fy install nvidia-glx-legacy 1>> $LOG 2>> $LOG || error 243
	fi
	if [ "$KMOD" = "nvidia" ]; then
		# We have to install nvidia-glx to get the Driver working
		DEBIAN_FRONTEND="noninteractive" \
		DEBIAN_PRIORITY="critical" \
		DEBCONF_NOWARNINGS="yes" \
		apt-get -fy install nvidia-glx 1>> $LOG 2>> $LOG || error 243
	fi
}

write_xorg() 
{
	# Changing the xorg.conf to use our brandnew installed Driver.
	# We are creating a Backup by using date and time for the 
	# Filename. Just in case the User will run the Script several
	# Times he will still be able to restore any of the Backups.
	EXTENSION=$(date +%d%m%y-%H%M)
	XORGCFG="/etc/X11/xorg.conf"
	XORGBKP="/etc/X11/xorg.$EXTENSION"
	# Creating the Backup
	cp $XORGCFG $XORGBKP
	echo "* ${BLUE}Original $XORGCFG saved as $XORGBKP.${NORMAL}"
	
	# Changing entry's for nvidia using Perl oneliners.
	if [ $KMOD = "nvidia" ]; then
		# The Perl oneliners are just a Fallback in case nvidia-xconfig will fail to install
		perl -pi -e 's/^[\s]*Driver\s*"nv"/\tDriver\t"nvidia"/g'	$XORGCFG
		perl -pi -e 's/^[\s]*Driver\s*"fbdev"/\tDriver\t"nvidia"/g'	$XORGCFG 
		perl -pi -e 's/^[\s]*Driver\s*"vesa"/\tDriver\t"nvidia"/g'	$XORGCFG
		DEBIAN_FRONTEND="noninteractive" \
		DEBIAN_PRIORITY="critical" \
		DEBCONF_NOWARNINGS="yes" \
		# For NVIDIA Cards we use nvidia-xconfig to change the xorg.conf
		apt-get -fy install nvidia-xconfig 1>> $LOG 2>> $LOG || error 241
		echo "* ${BLUE}Running nvidia-xconfig to configure your xorg.${NORMAL}"
		nvidia-xconfig -o /etc/X11/xorg.conf -s
	fi
	
	# Changing entry's for nvidia-legacy using Perl oneliners.
	if [ $KMOD = "nvidia-kernel-legacy" ]; then
		# The Perl oneliners are just a Fallback in case nvidia-xconfig will fail to install
		perl -pi -e 's/^[\s]*Driver\s*"nv"/\tDriver\t"nvidia"/g'	$XORGCFG
		perl -pi -e 's/^[\s]*Driver\s*"fbdev"/\tDriver\t"nvidia"/g'	$XORGCFG
		perl -pi -e 's/^[\s]*Driver\s*"vesa"/\tDriver\t"nvidia"/g'	$XORGCFG
		# For NVIDIA Cards we use nvidia-xconfig to change the xorg.conf
		DEBIAN_FRONTEND="noninteractive" \
                DEBIAN_PRIORITY="critical" \
                DEBCONF_NOWARNINGS="yes" \
                apt-get -fy install nvidia-xconfig 1>> $LOG 2>> $LOG || error 241
		echo "* ${BLUE}Running nvidia-xconfig to configure your xorg.${NORMAL}"
                nvidia-xconfig -o /etc/X11/xorg.conf -s
	fi

	# Changing entry's for fglrx using Perl oneliners.
	if [ $KMOD == "fglrx" ]; then
		# The Perl oneliners are just a Fallback in case aticonfig will fail
		perl -pi -e 's/^[\s]*Driver\s*"radeon"/\tDriver\t"fglrx"/g'	$XORGCFG 
		perl -pi -e 's/^[\s]*Driver\s*"fbdev"/\tDriver\t"fglrx"/g'	$XORGCFG
		perl -pi -e 's/^[\s]*Driver\s*"vesa"/\tDriver\t"fglrx"/g'	$XORGCFG
		#aticonfig --initial
	fi
}

sources_backup() {
	# Backup sources.list and create the temporary config with contrib and non-free repos
	cp /etc/apt/sources.list /etc/apt/sources.backup
	if [ "EXPERIMENTAL" = 1 ]; then
	cat > "/etc/apt/sources.list" \
	<<EOF
deb http://ftp.debian.org/debian/ sid main contrib non-free
deb http://ftp.debian.org/debian experimental main contrib non-free
deb http://sidux.com/debian/ sid main fix.main contrib non-free
EOF	
	else
	cat > "/etc/apt/sources.list" \
	<<EOF
deb http://ftp.debian.org/debian/ sid main contrib non-free
deb http://sidux.com/debian/ sid main fix.main contrib non-free
EOF
	fi
	apt-get update 1>> /dev/null 2>> /dev/null || error 245
}

sources_restore() {
	# Restoring original sources.list
	cp /etc/apt/sources.backup /etc/apt/sources.list 1>> $LOG 2>> $LOG
}

clean_up() {
	# Run apt-get update to avoid apt error messages
	apt-get update 1>> /dev/null 2>> /dev/null || error 245
}

install_me() {
	# If someone tries to run this Script without installing the Package, we try to install it
	apt-get install sidux-binary-gfx 1>> /dev/null 2>> /dev/null || exit 1
	/usr/sbin/install-binary-gfx || exit 1
	exit 0
}

nuke_me() {
	# If someone is pressing STRG+C we restore backed up sources.list before we left
	[ -f /etc/apt/sources.backup ] && cp /etc/apt/sources.backup /etc/apt/sources.list
	rm -f /etc/apt/sources.backup 1>> /dev/null 2>> /dev/null 
}

detect_card() {
	# Try to identify which kind of GFX Board we have
	lspci | grep nVidia > /dev/null && KMOD="nvidia"
	lspci | grep ATI > /dev/null && KMOD="fglrx"
}

check_live() {
	# This will check if we are in livemode and run restartx automatically
	if [ "$FLL_DISTRO_MODE" = "live" ]; then
		restartx &
	fi
}

main() {
	detect_card
	sources_backup
	dpkg -l | grep sidux-binary-gfx 1>> /dev/null 2>> /dev/null || install_me 
	
	# If we still don't know the GFX Board we will exit with exitcode 254.
	# User can still build the Modules by using -b <Name of the Module>.
	if [ $KMOD = "none" ]; then
		error 254
	fi
	
	if [ $KMOD = "nvidia" ]; then
		if [ -f $DATABASE ]; then
			. $DATABASE
			echo ""
		else
			error 246
		fi
	
		case $DRIVER in
			legacy) NVSRC="nvidia-kernel-legacy-source"; KMOD="nvidia-kernel-legacy";;
			nvidia) NVSRC="nvidia-kernel-source";;
			nv) NVSRC="none";;
			*) NVSRC="none";;
		esac
		[ "$DEBUG" = 1 ] && echo "${YELLOW}+++ NVSRC: $NVSRC.${NORMAL}"
	fi
	
	# We call all the function's to install the Driver automatically
	create_log
	prep
	build
	install_deb
	write_xorg
	sources_restore
	clean_up
	check_live
	
	# If we are using -v we will Print out the Log now.
	if [ $DEBUG = "1" ]; then
		cat $LOG
	fi
	
	# We are done :)
	echo ""
	echo "${GREEN}Script finished.${NORMAL}"
}

# We have to be root. Oherwise we exit with exitcode 1
if [ "$(id -u)" -ne 0 ]; then
	[ -x /usr/bin/su-me ] && DISPLAY="" exec su-me "$0" "$@"

	echo "${RED}Error: You must be root to run this script!${NORMAL}"
	exit 1
fi

# Check fo ssft and choose a frontend. This will be needed later.
#if [ -r /usr/bin/ssft.sh ]; then
#	. /usr/bin/ssft.sh
#	ssft_choose_frontend > /dev/null
#else
#	echo "/usr/bin/ssft.sh not found. Not a big Problem yet."
#	echo "Please make sure ssft and zenity are installed."
#	exit 1
#fi

# Check if we are on a HD Install or livemode
FLL_IMAGE_DIR="SIDUX"
FLL_DISTRO_MODE="installed"
[ -r /etc/default/distro ] && . /etc/default/distro

if [ "$FLL_DISTRO_MODE" = "live" ]; then
	if grep -q unionfs /proc/mounts; then
		echo "${BLUE}Unionfs found${NORMAL}."
	else
		echo "${BLUE}Activating Unionfs now.${NORMAL}"
		mkdir -p /tmp/union
		mount -t unionfs -o dirs="/tmp/union/:/$FLL_IMAGE_DIR" /none "/$FLL_IMAGE_DIR/" 2>&1 >/dev/null
	fi
fi

# Initializing basic Variables
DEBUG=0
KMOD="none"
ARCH=$(uname -m)
KERNEL=$(uname -r)
SLH_KERNEL="FALSE"
DATE=$(date +%D\ %T)
ME=$(basename $0)
BUILDONLY="FALSE"
DATABASE="/usr/share/sidux-binary-gfx/detect_nvcard"
MEMFREE=$(grep MemFree /proc/meminfo | awk '{print $2}')
DISKFILTER=$(df -k /usr/src | awk '{print $6}' | grep \/)
DISKFREE=$(df -k /usr/src | grep $DISKFILTER | awk '{print $2}')
EXPERIMENTAL=0

# Reset fb color mode
RESET="]R"
# ANSI COLORS
# Erase to end of line
CRE="
[K"
# Clear and reset Screen
CLEAR="c"
# Normal color
NORMAL="[0;39m"
# RED: Failure or error message
RED="[1;31m"
# GREEN: Success message
GREEN="[1;32m"
# YELLOW: Descriptions
YELLOW="[1;33m"
# BLUE: System mesages
BLUE="[1;34m"
# MAGENTA: Found devices or drivers
MAGENTA="[1;35m"
# CYAN: Questions
CYAN="[1;36m"
# BOLD WHITE: Hint
WHITE="[1;37m"

echo "${BLUE}Script to install binary Drivers for NVIDIA/ATI Grafik Cards${NORMAL}"
echo ""

# We need 50MB free to build and install the Module
if [ "$DISKFREE" -lt "50000" ]; then
	echo "${RED}There is not enough Diskspace available to install/build a Kernel Module.${NORMAL}"
	exit 1
fi

# Do we have one of the wonderful SLH Kernel's 
uname -r | grep "\-slh\-" > /dev/null && SLH_KERNEL="TRUE"
uname -r | grep "\-slh64\-"  > /dev/null && SLH_KERNEL="TRUE"
trap nuke_me exit

# We can have Parameters. By default without Parameters the Script will 
# do all Operations automatically. If we just want to build the Package
# we can append the -b Parameter
VERBOSE=0
UPDATE=0
while getopts ab:ediuvh opt 
do
 case $opt in
   # We can run the Script in verbose Mode to see more output and the logfile after the execution.	
	a) # Building automatically
		main
	;;
	v) DEBUG=1 
	[ "$DEBUG" = 1 ] && echo "${YELLOW}+++ DIALOG: $_l_frontend.${NORMAL}"
	[ "$DEBUG" = 1 ] && echo "${YELLOW}+++ FLL_IMAGE_DIR: $FLL_IMAGE_DIR.${NORMAL}"
	[ "$DEBUG" = 1 ] && echo "${YELLOW}+++ FLL_DISTRO_MODE: $FLL_DISTRO_MODE.${NORMAL}"
	[ "$DEBUG" = 1 ] && echo "${YELLOW}+++ ARCH: $ARCH.${NORMAL}"
	[ "$DEBUG" = 1 ] && echo "${YELLOW}+++ KERNEL: $KERNEL.${NORMAL}"
	[ "$DEBUG" = 1 ] && echo "${YELLOW}+++ SLH_KERNEL: $SLH_KERNEL.${NORMAL}"
	[ "$DEBUG" = 1 ] && echo "${YELLOW}+++ DATE: $DATE.${NORMAL}"
	[ "$DEBUG" = 1 ] && echo "${YELLOW}+++ ME: $ME.${NORMAL}"
	[ "$DEBUG" = 1 ] && echo "${YELLOW}+++ DATABASE: $DATABASE.${NORMAL}"
	[ "$DEBUG" = 1 ] && echo "${YELLOW}+++ MEMFREE: $MEMFREE.${NORMAL}"
	[ "$DEBUG" = 1 ] && echo "${YELLOW}+++ DISKFREE: $DISKFREE.${NORMAL}"
		;;
	b) echo "${BLUE}Building $OPTARG${NORMAL}"
	KMOD=$OPTARG
	MODTEST="FALSE"
	BUILDONLY="TRUE"
	[ $KMOD = "nvidia" ] && MODTEST="TRUE"
	[ $KMOD = "fglrx" ] && MODTEST="TRUE"
	[ $KMOD = "nvidia-legacy" ] && MODTEST="TRUE" && KMOD="nvidia-kernel-legacy"
	[ $MODTEST = "FALSE" ] && error 249
	create_log
	sources_backup
	prep
	build
	sources_restore
	clean_up
	exit 0
		;;
	d) echo "${BLUE}Detecting NVIDIA Cards${NORMAL}"
	# That option will show User the Card which will be detected by this Script
	detect_card
	[ "$DEBUG" = 1 ] && echo "+++ KMOD: $KMOD."
	if [ "$KMOD" = "fglrx" ]; then
		echo "${BLUE}ATI Card found.${NORMAL}"
	else
		if [ -r /usr/share/sidux-binary-gfx/detect_nvcard ]; then
			[ "$DEBUG" = 1 ] && echo "+++ DATABASE found"
			. /usr/share/sidux-binary-gfx/detect_nvcard
		else
			echo "/usr/share/sidux-binary-gfx/detect_nvcard not found."
			echo "Please check Installation of sidux-binary-gfx."
			exit 1
		fi
	fi
	exit 0
		;;
	e)
	echo "${RED}Using Experimantal Source"
	echo "Its not recommended to use the experimental source."
	echo "There is no support from the sidux Team for that Function.${NORMAL}"
	echo ""
	echo "${CYAN}Are you sure you want to use experimental? (yes/no)${NORMAL}"
	read answer 
	if [ ! "$answer" = "yes" ]; then
		exit 0
	fi
	echo ""
	EXPERIMENTAL=1
	main
		;;
	u) echo "${BLUE}Updating Script${NORMAL}"
	# This will update the Script
	create_log
	sources_backup
	DEBIAN_FRONTEND="noninteractive" \
	DEBIAN_PRIORITY="critical" \
	DEBCONF_NOWARNINGS="yes" \
	apt-get -y upgrade sidux-scripts sidux-binary-gfx 1>> $LOG 2>> $LOG || error 248
	sources_restore
	clean_up
	exit 0
		;;
	# Of course we have a help Option.	
	\?|h) echo "Usage $0 [options] " >&2
		echo " -v	Verbose" >&2
		echo " -b MOD	Build only" >&2
		echo " -d 	Detect Card only" >&2
		echo " -e	Use Experimental" >&2 
		echo ""
		echo "Valid MOD's are nvidia, nvidia-legacy and fglrx."
		exit 0
		;;
  esac
done

#END

