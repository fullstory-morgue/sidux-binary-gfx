#!/bin/sh
# Author: Andreas Weber <andreas@it-weber.com>
# Date: 16.12.2006
# Purpose: Script to install binary nvidia/ati drivers for sidux
# License: BSD, see /usr/share/common-licenses/BSD
# Changelog: debian/changelog
#

print_header()
{
	echo "${YELLOW}--------------------------${NORMAL}"	
	echo "${YELLOW}$1${NORMAL}"
	echo "${YELLOW}--------------------------${NORMAL}"
	echo ""
}

print_normal()
{
	echo "${BLUE}$1${NORMAL}"
}

print_title()
{
	echo "${YELLOW}[ $1 ]${NORMAL}"
}

print_status()
{
	echo " ${WHITE}* ${BLUE}$1${NORMAL}"
}

print_sum()
{
	echo "${YELLOW}$1 ${WHITE}$2${NORMAL}"
}

print_error()
{
	echo "${RED}! ERROR: ($1)${NORMAL} ${BLUE}$2${NORMAL}"
}

error() 
{
	# This Funktion is printing out all Error Messages. 
	# This can also be used as the Referenz for the Exit Codes.
	ERR_C=$1
	case $ERR_C in
		254) ERR_D="No NVIDIA/ATI Card found !";;
		253) ERR_D="Kernel Headers not installed !";;
		252) ERR_D="m-a prepare failed !";;
		251) ERR_D="failed to install linux-headers !";;
		250) ERR_D="Build failed !";;
		249) ERR_D="Wrong argument. Valid modules are nvidia or fglrx. !";;
		248) ERR_D="Package cannot be installed !";;
		246) ERR_D="Database Script not found !";;
		245) ERR_D="apt-get update failed !";;
		244) ERR_D="m-a update failed !";;
		243) ERR_D="nvidia-glx install failed !";;
		242) ERR_D="nvidia-kernel-common install failed !";;
		241) ERR_D="nvidia-xconfig install failed !";;
		240) ERR_D="nvidia-kernel-source install failed !";;
		239) ERR_D="nvidia-kernel-legacy-source install failed !";;
		238) ERR_D="fglrx-source install failed !";;
		237) ERR_D="Wrong Parameter !"
			help_me
			exit	1;;
		236) ERR_D="Network unreachable !";;
		235) ERR_D="Wrong Module selected !";;
		234) ERR_D="Compiz Installation failed !";;
		233) ERR_D="Patching the Source failed !";;
		232) ERR_D="devscripts Install failed !";;
		231) ERR_D="Could not fetch Source Package !";;
		230) ERR_D="Wrong md5 sum for $ATISRC !";;
		229) ERR_D="hwinfo not found !";;
		*) ERR_D="Unexpected Error !";;
	esac
	print_error "$ERR_C" "$ERR_D"
	if [ ! -z $LOG ]; then # If we get an error before Log is created we just give it out to stdout.
		print_status "Check ${MAGENTA}$LOG${BLUE} for details."
		echo "$DATE ERROR: ($ERR_C) $ERR_D" >> $LOG
	fi
	print_normal ""
	print_status "Cleaning up. Please wait."
	# If we are in verbose Mode print out the Log File.
	[ $VERBOSE = 1 ] && cat $LOG
	exit $ERR_C
}

create_log() 
{
	print_normal "Start Logging."
	print_status "Create Log file."
	# This Funktion is creating a new Logfile. It will overwrite previous Versions.
	LOG="/var/log/sidux-$KMOD-installer.log"
	# Delete old Logfile if exist.
	rm -f $LOG 2&> /dev/null
	# Create the new File and write basic Information.
	touch $LOG
	echo "Script started: $DATE" >> $LOG
	echo "Detected Card: $KMOD" >> $LOG
	echo "Installed Kernel: $KERNEL" >> $LOG
	echo "Arch: $ARCH" >> $LOG
	echo "Experimental: $EXPERIMENTAL" >> $LOG
	echo "" >> $LOG
}

install_source()
{
	print_normal "Installing Source for ${MAGENTA}$KMOD..."
	if [ "$KMOD" = "nvidia" ]; then
		apt-get -y --reinstall install nvidia-kernel-source module-assistant 1>> $LOG 2>> $LOG || error 240	
	fi
	if [ "$KMOD" = "nvidia-kernel-legacy" ]; then
		apt-get -y --reinstall install nvidia-kernel-legacy-source module-assistant 1>> $LOG 2>> $LOG || error 239		
	fi
	if [ "$KMOD" = "fglrx" ]; then
		apt-get -y --reinstall install fglrx-kernel-src module-assistant 1>> $LOG 2>> $LOG || error 238	
	fi
}

prep() 
{
	print_normal "Preparing the source..."
	# This Funktion will call m-a prepare and make sure the Kernel
	# Headers and other required Packages are  installed.
	# Write Log entry
	echo "$DATE Prepare Process started." >> $LOG
	# Test if we are running a SLH Kernel. That is important because the Kernel isn't 
	# Part of any Apt Repository. We have to have manually Funktion here to install 
	# the Headers.
	apt-get -yf --purge remove nvidia* fglrx* 1>> $LOG 2>> $LOG  || apt-get -yf install 1>> $LOG 2>> $LOG
	apt-get -yf --purge remove fglrx-kernel-src 1>> $LOG 2>> $LOG  || apt-get -yf install 1>> $LOG 2>> $LOG
	rm -f /usr/src/nvidia* 1>> $LOG 2>> $LOG
	rm -rf /usr/src/modules/nvidia* 1>> $LOG 2>> $LOG
	rm -f /usr/src/fglrx* 1>> $LOG 2>> $LOG
	rm -rf /usr/src/modules/fglrx* 1>> $LOG 2>> $LOG
	if [ $SLH_KERNEL = "TRUE" ]; then
		# If Headers are already installed we are fine to run m-a prepare
		if [ -d /usr/src/linux-headers-$KERNEL ]; then
			print_status "Kernel Headers found."
			print_status "Running module-assistant prepare."
			apt-get -y --purge remove nvidia-kernel-source 1>> $LOG 2>> $LOG
			m-a update 1>> $LOG 2>> $LOG || error 244
			install_source
			m-a get $KMOD 1>> $LOG 2>> $LOG || error 231
			m-a unpack $KMOD 1>> $LOG 2>> $LOG
			m-a prepare $KMOD 1>> $LOG 2>> $LOG  || m-a prepare $KMOD  || error 252
		else
			# If Headers are not installed we stop with the error Message
			# 253. User must install the Headers manually. There is a plan
			# to have this Script installing the Headers manually by using
			# slh-source.sh. Comming soon.
			error 253
		fi
	else
		# If we don't have a SLH Kernel we are checking if Headers are already
		# installed. If not the Script will try to install it. If we can't install 
		# the Headers by using apt (maybe a Users Kernel) we will exit the Script 
		# with Error Code 252
		if [ -d /usr/src/linux-headers-$KERNEL ]; then
			apt-get -y install linux-headers-$KERNEL 1>> $LOG 2>> $LOG || error 252
		fi
		# We check here again if Headers are there. Just in case apt is reporting
		# exit code 0 but something is still wrong.
		[ -d /usr/src/linux-headers-$KERNEL ] || error 253
		# Running m-a prepare
		install_source
		m-a update 1>> $LOG 2>> $LOG || error 244
		m-a get $KMOD 1>> $LOG 2>> $LOG || error 231
		m-a unpack $KMOD 1>> $LOG 2>> $LOG
		m-a prepare $KMOD 1>> $LOG 2>> $LOG || error 252
	fi
}

patch_src() {
	print_normal "Check for Patches..."
	# This function is to patch the source
	case $KMOD in
		nvidia) #print_status "Patch nvidia source"
			;;
		nvidia-kernel-legacy) #print_status "Patch nvidia-legacy source"
			;;
		fglrx) #print_status "Patch fglrx source"
			;;
	esac
}

build() {
	print_normal "Building the Module..."
	# We will create the Package now by using m-a. If the build fails we get the 
	# Exitcode 250. 
	print_status "Building ${MAGENTA}$KMOD ${BLUE}Module."
	if [ "$KMOD" = "nvidia-kernel-legacy" ]; then
		ln -s /usr/src/linux/include/linux/autoconf.h /usr/src/linux/include/linux/config.h 1>> $LOG 2>> $LOG
	fi
	
	if [ "$BUILDONLY" = "FALSE" ]; then
		if [ "$KMOD" = "nvidia-kernel-legacy" ]; then
			# The legacy Driver needs a hack on the Source / Headers
			ln -s /usr/src/linux/include/linux/autoconf.h /usr/src/linux/include/linux/config.h 1>> $LOG 2>> $LOG
			# We have to make sure nvidia-kernel-common is installed
			apt-get -y install nvidia-kernel-common 1>> $LOG 2>> $LOG || error 242
		fi
		if [ "$KMOD" = "nvidia" ]; then
			# We have to make sure nvidia-kernel-common is installed
			apt-get -y install nvidia-kernel-common 1>> $LOG 2>> $LOG || error 242
		fi
	fi
	
	print_status "Cleaning up old deb's."
	# We are cleaning /usr/src from old nvidia debs. Otherwise the ls command for $DEB will create a List
	rm -f /usr/src/$KMOD*$KERNEL*.deb 1>> $LOG 2>> $LOG
	# Building the Module
	m-a a-b -Oi $KMOD 1>> $LOG 2>> $LOG || error 250
	print_status "${MAGENTA}$KMOD ${GREEN}build successfull."
}

install_deb() 
{
	print_normal "Install the Module..."
	# The build should be fine and we are installing the created deb right now.
	# First we have to get the Name of the File.
	cd /usr/src
	if [ "$KMOD" = "nvidia-kernel-legacy" ]; then
		DEB=$(ls $KMOD-$KERNEL*.deb)
	else
		DEB=$(ls $KMOD-kernel-$KERNEL*.deb)
	fi
	# Go back to the Path we were comming.
	cd $OLDPATH
	print_status "Installing $DEB"
	# Install the deb.
	dpkg -i --no-debsig /usr/src/$DEB 1>> $LOG 2>> $LOG
	if [ ! "$?" = "0" ]; then
		# If exitcode from dpkg is not 0 maybe we have to install dependencies.
		# We try an apt-get -f install.
		apt-get -fy install 1>> $LOG 2>> $LOG || error 248
	fi	
	if [ "$KMOD" = "nvidia-kernel-legacy" ]; then
		# We have to install nvidia-glx to get the Driver working
		apt-get -y install nvidia-glx-legacy 1>> $LOG 2>> $LOG || error 243
	fi
	if [ "$KMOD" = "nvidia" ]; then
		# We have to install nvidia-glx to get the Driver working
		apt-get -y install nvidia-glx 1>> $LOG 2>> $LOG || error 243
	fi
}

ATI_INST()
{
	pushd /usr/src
	wget -Nc $ATIURL$ATISRC
	sh /usr/src/$ATISRC -c || exit 230
	sh /usr/src/$ATISRC --buildpkg Debian/sid || error 250
	dpkg -i fglrx*.deb
	apt-get -fy install 1>> $LOG 2>> $LOG || error 248
	popd
}

write_xorg() 
{
	print_normal "Write new xorg.conf..."
	# Changing the xorg.conf to use our brandnew installed Driver.
	# We are creating a Backup by using date and time for the 
	# Filename. Just in case the User will run the Script several
	# Times he will still be able to restore any of the Backups.
	EXTENSION=$(date -u +%Y%m%d%H%M)
	XORGCFG="/etc/X11/xorg.conf"
	XORGBKP="/etc/X11/xorg.conf.$EXTENSION"
	# Creating the Backup
	cp $XORGCFG $XORGBKP
	print_status "Original $XORGCFG saved as $XORGBKP."
	
	# Changing entry's for nvidia using Perl oneliners.
	if [ $KMOD = "nvidia" ]; then
		# The Perl oneliners are just a Fallback in case nvidia-xconfig will fail to install
		apt-get -fy install nvidia-xconfig 1>> $LOG 2>> $LOG || error 241
		print_status "Running nvidia-xconfig to configure your xorg."
		nvidia-xconfig -o /etc/X11/xorg.conf -s 1>> $LOG 2>> $LOG
		if [ "$NOLOGO" = 1 ]; then
			nvidia-xconfig --no-logo -o /etc/X11/xorg.conf -s 1>> $LOG 2>> $LOG
		fi
	fi
	
	# Changing entry's for nvidia-legacy using Perl oneliners.
	if [ $KMOD = "nvidia-kernel-legacy" ]; then
		# The Perl oneliners are just a Fallback in case nvidia-xconfig will fail to install
		apt-get -fy install nvidia-xconfig nvidia-settings 1>> $LOG 2>> $LOG || error 241
		print_status "Running nvidia-xconfig to configure your xorg."
                nvidia-xconfig -o /etc/X11/xorg.conf -s 1>> $LOG 2>> $LOG
		if [ "$NOLOGO" = 1 ]; then
			nvidia-xconfig --no-logo -o /etc/X11/xorg.conf -s 1>> $LOG 2>> $LOG
		fi
	fi

	# Changing entry's for fglrx using Perl oneliners.
	if [ $KMOD == "fglrx" ]; then
		# The Perl oneliners are just a Fallback in case aticonfig will fail
		#apt-get -fy install fglrx-driver fglrx-control 1>> $LOG 2>> $LOG || error 241
		apt-get -fy install fglrx-control 1>> $LOG 2>> $LOG || error 241
		print_status "Running aticonfig to configure your xorg."
		aticonfig --initial --input=/etc/X11/xorg.conf --output=/etc/X11/xorg.conf 1>> $LOG 2>> $LOG
	fi
}

sources_backup() {
	# Backup sources.list and create the temporary config with contrib and non-free repos
	cp /etc/apt/sources.list /etc/apt/sources.backup
	echo "deb http://ftp.nl.debian.org/debian/ sid main contrib non-free" > "/etc/apt/sources.list" 
	echo "deb http://sidux.com/debian/ sid main fix.main contrib non-free" >> "/etc/apt/sources.list"
	print_status "Running apt-get update."
	apt-get update 1>> /dev/null 2>> /dev/null || error 245
}

sources_restore() 
{
	# Restoring original sources.list
	cp /etc/apt/sources.backup /etc/apt/sources.list 1>> $LOG 2>> $LOG
}

clean_up() 
{
	[ ! "$NETWORK" = 0 ] && error 236
	# Run apt-get update to avoid apt error messages
	print_status "Cleaning up. Please wait."
	apt-get update 1>> /dev/null 2>> /dev/null || error 245
}

install_me() 
{
	[ ! "$NETWORK" = 0 ] && error 236
	# If someone tries to run this Script without installing the Package, we try to install it
	apt-get install sidux-binary-gfx 1>> /dev/null 2>> /dev/null || exit 1
	/usr/sbin/install-binary-gfx || exit 1
	exit 0
}

nuke_me() 
{
	# If someone is pressing STRG+C we restore backed up sources.list before we left
	[ -f /etc/apt/sources.backup ] && cp /etc/apt/sources.backup /etc/apt/sources.list
	rm -f /etc/apt/sources.backup 1>> /dev/null 2>> /dev/null 
	[ "NETWORK" = 0 ] && apt-get update 2>&1 /dev/null
	print_normal "Script finished."
	print_normal ""
}

detect_card() 
{
	# Try to identify which kind of GFX Board we have
	if [ -f "/usr/sbin/hwinfo" ]; then
		print_normal "Detecting GFX Card..."
		MODEL=$(hwinfo --gfxcard | grep Model | sed 's|Model:||' | sed 's|"||g' | sed 's|\s\s||g' | sed 's|\s||')
		KMOD=$(hwinfo --gfxcard | grep "Server Module" | grep nvidia | sed 's|XFree86 v4 Server Module: ||' | sed 's|\s||g')
		print_status "Detected Card: ${MAGENTA}$MODEL"
		print_status "Kernel Module: ${MAGENTA}$KMOD"
	else
		error 229
	fi
}

check_live() 
{
	# This will check if we are in livemode and run restartx automatically
	if [ "$FLL_DISTRO_MODE" = "live" ]; then
		#restartx &
		print_normal "${RED}Restarting X is currently not working. It will restart your Computer. Sorry.${NORMAL}"
		print_normal ""
	fi
}

help_me() 
{
	print_normal "${BLUE}Usage:${NORMAL} $0 [options] "
	print_normal " -a | --auto		Automatic mode"
	print_normal " -A | --accept		Accept Disclaimer automatically (Please read it once)"
	print_normal " -b | --build 		MOD Build only (nvidia|nvidia-legacy|fglrx)"
	print_normal " -d | --detect		Detect Card only"
	print_normal " -u | --update		Update Script"
	print_normal " -v | --verbose		Verbose"
	print_normal " -D | --debug		Debug (same as Verbose)"
	print_normal " --no-logo		Disable NVIDIA LOGO (applies to NVIDIA only)"
	print_normal ""
	print_normal "${BLUE}Examples:${NORMAL}"
	print_normal "${MAGENTA}install-binary-gfx -a${NORMAL} (This will detect you Card and install the sid Drivers automatically.)"
	print_normal "${MAGENTA}install-binary-gfx -b nvidia${NORMAL} (This will just build the nvidia-module....deb in /usr/src. The same works with fglrx and nvidia-legacy.)"
	print_normal "${MAGENTA}install-binary-gfx -d${NORMAL} (This will detect your Card and just print out the Information.)"
	print_normal "${MAGENTA}install-binary-gfx -u${NORMAL} (This will update this Script. Please note that will not be done by dist-upgrade as long as you"
	print_normal "                       have contrib for the sidux repository activated in your sources.list.)"
	print_normal ""
	print_normal "${BLUE}Troubleshooting:${NORMAL}"
	print_normal "If the Script fails for your Card please run the Script in debug mode and post the output as well as the log file"
	print_normal "/var/log/sidux-CARD-installer.log in the Sidux Forum or http://paste.debian.net and contact me (webera) in ${BLUE}#sidux${NORMAL}."
	print_normal ""
}

main() 
{
	[ ! "$NETWORK" = 0 ] && error 236
	[ "$KMOD" = "none" ] && detect_card
	#if [ $KMOD = "fglrx" ]; then
	#	print_normal "${RED}fglrx driver is currently broken. Sorry.${NORMAL}"
	#	exit 0
	#fi
	sources_backup
	dpkg -l | grep sidux-binary-gfx 1>> /dev/null 2>> /dev/null || install_me 
	
	# If we still don't know the GFX Board we will exit with exitcode 254.
	# User can still build the Modules by using -b <Name of the Module>.
	if [ $KMOD = "none" ]; then
		error 254
	fi
	
	if [ $KMOD = "nvidia" ]; then
		case $DRIVER in
			legacy) NVSRC="nvidia-kernel-legacy-source"; KMOD="nvidia-kernel-legacy";;
			nvidia) NVSRC="nvidia-kernel-source";;
			nv) NVSRC="none";;
			*) NVSRC="none";;
		esac
	fi
	
	# We call all the function's to install the Driver automatically
	create_log
	prep
	patch_src
	build
	install_deb
	write_xorg
	sources_restore
	clean_up
	check_live
}

end_me()
{
	# We are done :)
	print_normal ""
	print_normal "${GREEN}Script finished.${NORMAL}"
	exit 0
}

update_me() 
{
	[ ! "$NETWORK" = 0 ] && error 236
	CVERSION=$(apt-cache policy sidux-binary-gfx | grep \* | awk '{print $2}')
	print_normal "Updating Script..."
	print_normal ""
	print_status "Current Version: ${MAGENTA}$CVERSION"
	# This will update the Script
	create_log
	sources_backup
	apt-get -y upgrade sidux-scripts sidux-binary-gfx 1>> $LOG 2>> $LOG || error 248
	UVERSION=$(apt-cache policy sidux-binary-gfx | grep \* | awk '{print $2}')
	print_status "Updated to: ${MAGENTA}$UVERSION$"
	sources_restore
	clean_up
}

# We have to be root. Oherwise we exit with exitcode 1
if [ "$(id -u)" -ne 0 ]; then
	[ -x /usr/bin/su-me ] && DISPLAY="" exec su-me "$0" "$@"

	print_normal "${RED}Error: You must be root to run this script!${NORMAL}"
	exit 1
fi

# Check if we are on a HD Install or livemode
FLL_IMAGE_DIR="SIDUX"
FLL_DISTRO_MODE="installed"
[ -r /etc/default/distro ] && . /etc/default/distro

# Initializing basic Variables
KMOD="none"
ARCH=$(uname -m)
KERNEL=$(uname -r)
SLH_KERNEL="FALSE"
DATE=$(date +%D\t%T)
ME=$(basename $0)
BUILDONLY="FALSE"
DATABASE="/usr/share/sidux-binary-gfx/detect_nvcard"
MEMFREE=$(grep MemFree /proc/meminfo | awk '{print $2}')
DISKFILTER=$(df -k /usr/src | awk '{print $6}' | grep \/)
DISKFREE=$(df -k /usr/src | grep $DISKFILTER | awk '{print $2}')
EXPERIMENTAL=0
ibg_detect=0
ibg_auto=0
DEBIAN_FRONTEND="noninteractive"
DEBIAN_PRIORITY="critical" 
DEBCONF_NOWARNINGS="yes" 
COMPIZ=0
#NETWORK=$(ping -c 4 sidux.com 1>> /dev/null 2>> /dev/null)
NETWORK=0
autoaccept="0"
NOLOGO=0
CACHE=0

# Reset fb color mode
RESET="]R"
# ANSI COLORS
# Erase to end of line
CRE="
[K"
# Clear and reset Screen
CLEAR="c"
# Normal color
NORMAL="[0;39m"
# RED: Failure or error message
RED="[1;31m"
# GREEN: Success message
GREEN="[1;32m"
# YELLOW: Descriptions
YELLOW="[1;33m"
# BLUE: System mesages
BLUE="[1;34m"
# MAGENTA: Found devices or drivers
MAGENTA="[1;35m"
# CYAN: Questions
CYAN="[1;36m"
# BOLD WHITE: Hint
WHITE="[1;37m"

if [ "$FLL_DISTRO_MODE" = "live" ]; then
	print_normal "${RED}This Script is currently not working in livemode because of the broken restartx Package.${NORMAL}"
	print_normal "Do you want to run it anyway?(yes/no)"
	read anyway
	if [ ! "$anyway" = "yes" ]; then
		exit 0
	fi
	print_normal ""
fi

# We need 50MB free to build and install the Module
if [ "$DISKFREE" -lt "50000" ]; then
	print_normal "${RED}There is not enough Diskspace available to install/build a Kernel Module.${NORMAL}"
	exit 1
fi

# Do we have one of the wonderful SLH Kernel's 
uname -r | grep "\-slh\-" > /dev/null && SLH_KERNEL="TRUE"
uname -r | grep "\-slh64\-"  > /dev/null && SLH_KERNEL="TRUE"
trap nuke_me exit

# We can have Parameters. If we just want to build the Package
# we can append the -b Parameter
VERBOSE=0
UPDATE=0

if [ "$1" = "" ]; then
	help_me
	end_me
fi

ARGS=$(
	getopt \
		--name "install-binary-gfx" \
		--options aAb:cdDuvh \
		--long auto,accept,build:,verbose,debug,detect,help,update,compiz,no-logo \
		-- $@
)

eval set -- "$ARGS"

while true; do
	case $1 in
		-v|-D|--debug|--verbose) 
			set -x
			;;
		--no-logo)
			NOLOGO=1
			;;
		-a|--auto) 
			ibg_auto=1
			;;
		-A|--accept)
			autoaccept="1"
			;;
		-b|--build) 
			shift
			KMOD=$1
			ibg_build=1
			;;
		-d|--detect) 
			ibg_detect=1
			autoaccept="1"
			;;
		-u|--update) 
			update_me
			exit 0
			;;
		-c|--compiz)
			COMPIZ="1"
			;;	
		-h|--help) 
			help_me
			exit 0
			;;
		--)
			shift
			break
			;;
		*)
			shift
			break
			;;
	esac
	shift
done

if [ ! "$autoaccept" = "1" ]; then
clear
print_normal "${BLUE}Script to install binary drivers for NVIDIA/ATI Graphics Cards${NORMAL}"
echo "${RED}"
cat \
<<EOF
-----------
DISCLAIMER:
-----------

This Script will install non-free Drivers for Nvidia and ATI GFX Cards.
Please read there License Agreement before you use this Script.

This Script will temporary use the contrib and non-free Repositorys
from Debian and Sidux to install the Drivers.

${WHITE}
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this package; if not, write to the Free Software 
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, 
MA 02110-1301, USA.

On Debian GNU/Linux systems, the text of the GPL license can be
found in /usr/share/common-licenses/GPL.
${RED}
Use this Script at your own Risk!
${NORMAL}

EOF
print_normal "${YELLOW}Do you agree (y/n)?${NORMAL}"
read AGREE
if [ ! "$AGREE" = "y" ]; then
	print_normal "Aborting."
	exit 1
fi
fi

print_title "$0"
print_normal "Script to install binary GFX Drivers for sidux."
print_normal ""

if [ "$ibg_detect" = 1 ]; then
	detect_card
	exit 0
fi


if [ "$ibg_build" = 1 ]; then
	[ ! "$NETWORK" = 0 ] && error 236
	print_normal "${BLUE}Building $OPTARG${NORMAL}"
	MODTEST="FALSE"
	BUILDONLY="TRUE"
	[ $KMOD = "nvidia" ] && MODTEST="TRUE"
	[ $KMOD = "fglrx" ] && MODTEST="TRUE"
	[ $KMOD = "nvidia-legacy" ] && MODTEST="TRUE" && KMOD="nvidia-kernel-legacy"
	[ $MODTEST = "FALSE" ] && error 249
	create_log
	sources_backup
	prep
	patch_src
	build
	sources_restore
	clean_up
	exit 0
fi

if [ "$ibg_auto" = 1 ]; then
	[ ! "$NETWORK" = 0 ] && error 236
	main
	exit 0
fi

if [ "$COMPIZ" = 1 ]; then
	[ ! "$NETWORK" = 0 ] && error 236
	create_log
	[ "$KMOD" = "none" ] && detect_card
	if [ "$KMOD" =  "nvidia" ]; then
		if [[ "$LOG" ]]; then
			create_log
		fi
		print_status "Installing compiz."
		WMNAME="kde"
		PACKAGES="compiz"
		WM=$(readlink /etc/alternatives/x-window-manager)
		case $WM in
			"/usr/bin/metacity")
				WMNAME="gnome"
				PACKAGES="$PACKAGES compiz-gnome"
			;;
			"/usr/bin/kde")
				WMNAME="kde"
				PACKAGES="$PACKAGES compiz-kde"
			;;
			*) echo test;;
		esac

		dpkg -l $PACKAGES 1>> /dev/null 2>> /dev/null || apt-get -y install $PACKAGES 1> /dev/null 2> /dev/null || error 234
		print_status "Compiz installed succesfully"
		cp /etc/X11/xorg.conf /etc/X11/xorg.compiz
		print_status "Enable Composite."
		if [ $KMOD = "nvidia" ]; then
			nvidia-xconfig -t | grep 'Option "AllowGLXWithComposite" "true"' > /dev/null || nvidia-xconfig --allow-glx-with-composite -s
			nvidia-xconfig -t | grep 'Option "RenderAccel" "true"' > /dev/null || nvidia-xconfig --render-accel -s
			cp /etc/X11/xorg.conf /tmp/xorg.tmp
			nvidia-xconfig -t | grep 'Option "XAANoOffscreenPixmaps" "True"' > /dev/null || sed '/DefaultDepth/a Option          "XAANoOffscreenPixmaps"          "True"' /tmp/xorg.tmp>/etc/X11/xorg.conf
			cp /etc/X11/xorg.conf /tmp/xorg.tmp
			nvidia-xconfig -t | grep 'Option "AddARGBGLXVisuals" "True"' > /dev/null || sed '/DefaultDepth/a Option          "AddARGBGLXVisuals"          "True"' /tmp/xorg.tmp>/etc/X11/xorg.conf
			COMPTEST=1
			grep '"Composite"' /etc/X11/xorg.conf > /dev/null || COMPTEST=0
			if [ "$COMPTEST" = "0" ]; then
				echo '' >> /etc/X11/xorg.conf
				echo '#Composite' >> /etc/X11/xorg.conf
				echo 'Section "Extensions"' >> /etc/X11/xorg.conf
				echo '	Option         "Composite" "on"' >> /etc/X11/xorg.conf
				echo 'EndSection' >> /etc/X11/xorg.conf
			fi
		fi
		if [ $KMOD = "fglrx" ]; then
			cp /etc/X11/xorg.conf /tmp/xorg.tmp
			nvidia-xconfig -t | grep 'Option "XAANoOffscreenPixmaps" "True"' > /dev/null || sed '/DefaultDepth/a Option          "XAANoOffscreenPixmaps"          "True"' /tmp/xorg.tmp>/etc/X11/xorg.conf
			cp /etc/X11/xorg.conf /tmp/xorg.tmp
			nvidia-xconfig -t | grep 'Option "AddARGBGLXVisuals" "True"' > /dev/null || sed '/DefaultDepth/a Option          "AddARGBGLXVisuals"          "True"' /tmp/xorg.tmp>/etc/X11/xorg.conf
			COMPTEST=1
			grep '"Composite"' /etc/X11/xorg.conf > /dev/null || COMPTEST=0
			if [ "$COMPTEST" = "0" ]; then
				echo '' >> /etc/X11/xorg.conf
				echo '#Composite' >> /etc/X11/xorg.conf
				echo 'Section "Extensions"' >> /etc/X11/xorg.conf
				echo '	Option         "Composite" "on"' >> /etc/X11/xorg.conf
				echo 'EndSection' >> /etc/X11/xorg.conf
			fi
		fi
	else
		print_normal "* ${RED}No supported Card for compiz. Sorry.${NORMAL}"
	fi
fi

end_me

#END
